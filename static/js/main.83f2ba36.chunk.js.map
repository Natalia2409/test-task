{"version":3,"sources":["components/EnterScreen.js","firebase.js","components/SignIn.js","components/SignUp.js","components/Main.js","App.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["EnterScreen","className","to","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","SignIn","useState","shown","setShown","emailRef","useRef","passwordRef","ref","type","name","placeholder","autoComplete","onClick","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","SignUp","shownRepeat","setShownRepeat","email","setEmail","password","setPassword","passwordRepeat","setPasswordRepeat","emailDirty","setEmailDirty","passwordDirty","setPasswordDirty","passwordRepeatDirty","setPasswordRepeatDirty","emailError","setEmailError","passwordError","setPasswordError","passwordRepeatError","setPasswordRepeatError","formValid","setFormValid","nameOfUser","setNameOfUser","useEffect","blurHandler","target","onChange","onBlur","test","String","toLowerCase","emailHandler","data-tip","data-for","id","place","effect","passwordHandler","passwordRepeatHandler","pathname","createUserWithEmailAndPassword","disabled","Main","props","location","App","exact","path","component","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83f2ba36.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EnterScreen() {\r\n    return (\r\n        <div className=\"border\">\r\n            <div className=\"backArea\">\r\n                <div className=\"enterScreen\">\r\n                    <div className=\"enterScreen__content\">\r\n                        <h1 className=\"enterScreen__title\">Ready for a great User experience?</h1>\r\n                        <p className=\"enterScreen__p\">Bring your media to the next level!</p>\r\n                        <div className=\"enterScreen__buttons\">\r\n                            <Link to=\"/signup\"><button className=\"enterScreen__signUp\">Sign Up</button></Link>\r\n                            <Link to=\"/signup\"><button className=\"enterScreen__arrow\">&#10132;</button></Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnterScreen;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBenAZ24i0BEMn0p9zCEI8ulxmnXVN0t4Q\",\r\n    authDomain: \"test-frontend-dfc16.firebaseapp.com\",\r\n    databaseURL: \"https://test-frontend-dfc16-default-rtdb.firebaseio.com\",\r\n    projectId: \"test-frontend-dfc16\",\r\n    storageBucket: \"test-frontend-dfc16.appspot.com\",\r\n    messagingSenderId: \"806363638451\",\r\n    appId: \"1:806363638451:web:528d819f36d69628d01ec6\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { auth };\r\nexport default db;","import React, { useState, useRef } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { auth } from \"../firebase\";\r\n\r\nfunction SignIn() {\r\n\r\n    const [shown, setShown] = useState(false);\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const signIn = (e) => {\r\n        e.preventDefault()\r\n\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser) => {\r\n            console.log(authUser)\r\n        }).catch((error) => {\r\n            alert(error)\r\n        })\r\n    };\r\n\r\n    const togglePasswordVisibility = () => {\r\n        setShown(!shown);\r\n    }\r\n\r\n    return (\r\n        <div className=\"border\">\r\n            <div className=\"backArea\">\r\n                <div className=\"signUp__content\">\r\n                    <h1>Sign In</h1>\r\n                    <div className=\"newForm\">\r\n                        <div className=\"newForm__inputs\">\r\n                            <p>Email</p>\r\n                            <input\r\n                                ref={emailRef}\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                placeholder=\"example@acme.com\"\r\n                                autoComplete=\"off\" />\r\n                        </div>\r\n                        <div className=\"newForm__inputs\">\r\n                            <p>Password</p>\r\n                            <input\r\n                                ref={passwordRef}\r\n                                className=\"password\"\r\n                                type={(shown) ? \"text\" : \"password\"}\r\n                                name=\"password\" />\r\n                            <i onClick={togglePasswordVisibility} className={`fas ${!shown ? \"fa-eye\" : \"fa-eye-slash\"} newForm__password-eye`}></i>\r\n                        </div>\r\n                        <Link to=\"/main\"><button onClick={signIn}>Sign In</button></Link>\r\n                    </div>\r\n                    <p className=\"newForm__text\">Don’t have an account yet? <Link to=\"/signup\"><span>Sign Up</span></Link></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { auth } from \"../firebase\";\r\n\r\nfunction SignUp() {\r\n\r\n    const [shown, setShown] = useState(false);\r\n    const [shownRepeat, setShownRepeat] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [passwordRepeat, setPasswordRepeat] = useState(\"\");\r\n    const [emailDirty, setEmailDirty] = useState(false);\r\n    const [passwordDirty, setPasswordDirty] = useState(false);\r\n    const [passwordRepeatDirty, setPasswordRepeatDirty] = useState(false);\r\n    const [emailError, setEmailError] = useState(\"Enter valid email\");\r\n    const [passwordError, setPasswordError] = useState(\"Enter valid password\");\r\n    const [passwordRepeatError, setPasswordRepeatError] = useState(\"Enter valid password\");\r\n    const [formValid, setFormValid] = useState(false);\r\n    const [nameOfUser, setNameOfUser] = useState(\"\");\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const fullName = (e) => {\r\n        setNameOfUser(e.target.value)\r\n        console.log(nameOfUser)\r\n    }\r\n\r\n    const register = (e) => {\r\n        e.preventDefault()\r\n\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser) => {\r\n            console.log(authUser)\r\n        }).catch((error) => {\r\n            alert(error)\r\n        })\r\n    };\r\n\r\n    const togglePasswordVisibility = () => {\r\n        setShown(!shown)\r\n    }\r\n\r\n    const togglePasswordRepeatVisibility = () => {\r\n        setShownRepeat(!shownRepeat)\r\n    }\r\n\r\n    const comparisonPassword = () => {\r\n        if (password !== passwordRepeat) {\r\n            alert(\"Passwords must be the same!\")\r\n            setFormValid(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (emailError || passwordError) {\r\n            setFormValid(false);\r\n        } else {\r\n            setFormValid(true);\r\n        }\r\n    }, [emailError, passwordError]);\r\n\r\n    const emailHandler = (e) => {\r\n        setEmail(e.target.value);\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (!re.test(String(e.target.value).toLowerCase())) {\r\n            setEmailError(\"Enter valid email\");\r\n        } else {\r\n            setEmailError(\"\");\r\n        }\r\n    }\r\n\r\n    const passwordHandler = (e) => {\r\n        setPassword(e.target.value);\r\n        const re = /^(?=.*[!@#$%^&*])(?=.*[A-Z]{2})(?=.[0-9a-zA-Z!@#$%^&*]).{9,}$/;\r\n        if (!re.test(e.target.value)) {\r\n            setPasswordError(\"Enter valid password\")\r\n            if (!e.target.value) {\r\n                setPasswordError(\"Enter valid password\")\r\n            }\r\n        } else {\r\n            setPasswordError(\"\");\r\n        }\r\n    }\r\n\r\n    const passwordRepeatHandler = (e) => {\r\n        setPasswordRepeat(e.target.value);\r\n        const re = /^(?=.*[!@#$%^&*])(?=.*[A-Z]{2})(?=.[0-9a-zA-Z!@#$%^&*]).{9,}$/;\r\n        if (!re.test(e.target.value)) {\r\n            setPasswordRepeatError(\"Enter valid password\")\r\n            if (!e.target.value) {\r\n                setPasswordRepeatError(\"Enter valid password\")\r\n            }\r\n        } else {\r\n            setPasswordRepeatError(\"\");\r\n        }\r\n    }\r\n\r\n    const blurHandler = (e) => {\r\n        switch(e.target.name) {\r\n            case \"email\":\r\n                setEmailDirty(true);\r\n                break;\r\n            case \"password\":\r\n                setPasswordDirty(true)\r\n                break;\r\n            case \"passwordRepeat\":\r\n                setPasswordRepeatDirty(true)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"border\">\r\n            <div className=\"backArea\">\r\n                <div className=\"signUp__content\">\r\n                    <h1>Sign Up</h1>\r\n                    <div className=\"newForm\">\r\n                        <div className=\"newForm__inputs\">\r\n                            <p>Full name</p>\r\n                            <input\r\n                                type=\"text\"\r\n                                name=\"fullName\"\r\n                                onChange={fullName}\r\n                                placeholder=\"John Doe\" />\r\n                        </div>\r\n                        <div className=\"newForm__inputs\">\r\n                            <p>Email</p>\r\n                            <input\r\n                                ref={emailRef}\r\n                                type=\"email\"\r\n                                onBlur={e => blurHandler(e)}\r\n                                onChange={e => emailHandler(e)} value={email}\r\n                                name=\"email\"\r\n                                placeholder=\"example@acme.com\"\r\n                                autoComplete=\"off\" />\r\n                            {(emailDirty && emailError) && <div className=\"newForm__error\">{emailError}</div>}\r\n                        </div>\r\n                        <div className=\"newForm__inputs\">\r\n                            <div className=\"newForm__hint\">\r\n                                <p>Password</p>\r\n                                <i data-tip data-for=\"icon\" className=\"fas fa-question-circle\"></i>\r\n                                <ReactTooltip\r\n                                    id=\"icon\"\r\n                                    place=\"top\"\r\n                                    className=\"newForm__tooltip\"\r\n                                    effect=\"solid\">\r\n                                    Password must contain 8+ symbols, 1 special and 2 capital letters\r\n                                </ReactTooltip>\r\n                            </div>\r\n                            <input\r\n                                ref={passwordRef}\r\n                                className=\"password\"\r\n                                type={(shown) ? \"text\" : \"password\"}\r\n                                onBlur={e => blurHandler(e)}\r\n                                onChange={e => passwordHandler(e)} value={password}\r\n                                name=\"password\" />\r\n                            <i\r\n                                onClick={togglePasswordVisibility}\r\n                                className={`fas ${!shown ? \"fa-eye\" : \"fa-eye-slash\"} newForm__password-eye newForm__pass`}></i>\r\n                            {(passwordDirty && passwordError) && <div className=\"newForm__error\">{passwordError}</div>}\r\n                        </div>\r\n                        <div className=\"newForm__inputs\">\r\n                            <p>Repeat password</p>\r\n                            <input\r\n                                className=\"password\"\r\n                                type={(shownRepeat) ? \"text\" : \"password\"}\r\n                                onBlur={e => blurHandler(e)}\r\n                                onChange={e => passwordRepeatHandler(e)} value={passwordRepeat}\r\n                                name=\"passwordRepeat\"\r\n                                placeholder=\"Passwords must be the same\" />\r\n                            <i onClick={togglePasswordRepeatVisibility} className={`fas ${!shownRepeat ? \"fa-eye\" : \"fa-eye-slash\"} newForm__password-eye`}></i>\r\n                            {(passwordRepeatDirty && passwordRepeatError) && <div className=\"newForm__error\">{passwordRepeatError}</div>}\r\n                        </div>\r\n                        <Link to={{\r\n                            pathname: \"/main\",\r\n                            name: nameOfUser\r\n                        }}><button onClick={register} disabled={!formValid}>Sign Up</button></Link>\r\n                    </div>\r\n                    <p className=\"newForm__text\">Already have an account? <Link to=\"/signin\"><span>Sign In</span></Link></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;\r\n","import React from 'react'\r\n\r\nfunction Main(props = \"\") {\r\n    console.log(props.location.name)\r\n    return (\r\n        <div className=\"border\">\r\n            <div className=\"backArea main\">\r\n                <h2>Hello{(props.location.name) ? `, ${props.location.name}` : \"\"}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport EnterScreen from \"./components/EnterScreen\";\nimport SignIn from \"./components/SignIn\";\nimport SignUp from \"./components/SignUp\";\nimport Main from \"./components/Main\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Switch>\n          <Route exact path=\"/\" component={EnterScreen} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <Route exact path=\"/signin\" component={SignIn} />\n          <Route exact path=\"/main\" component={Main} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}